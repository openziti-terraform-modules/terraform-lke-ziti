- name: Ensure service1 exists in Ziti
  hosts: localhost
  connection: local
  tasks:
    - name: Find Controller Pods By Namespace and Label
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - app.kubernetes.io/component=ziti-controller
        namespace: "{{ controller_namespace }}"
      register: controller_pods
    - name: Fail Unless One Controller Pod
      when: controller_pods.resources | length != 1
      ansible.builtin.fail:
        msg: "ERROR: expected exactly one controller pod"
    - name: Get Controller Pod
      ansible.builtin.set_fact:
        controller_pod: "{{ controller_pods.resources | first }}"
    - name: Debug Get Pod
      ansible.builtin.debug:
        var: controller_pod.metadata.name
    - name: Find Services
      kubernetes.core.k8s_exec:
        namespace: "{{ controller_namespace }}"
        pod: "{{ controller_pod.metadata.name }}"
        container: ziti-controller-admin
        command: |
          bash -c 'zitiLogin &>/dev/null; ziti edge list services --output-json'
      register: services
    - name: Get service1 Matches
      ansible.builtin.set_fact:
        service1_matches: "{{ services.stdout | from_json | json_query('data[?name==`service1`]') }}"
    - name: Debug Service Matches
      ansible.builtin.debug:
        var: service1_matches
    - name: Ensure service1 Delete Script Exists in Admin Container
      kubernetes.core.k8s_cp:
        namespace: "{{ controller_namespace }}"
        pod: "{{ controller_pod.metadata.name }}"
        container: ziti-controller-admin
        remote_path: /tmp/service1-delete.bash
        state: to_pod
        content: |
          # set -o errexit # allow errors on delete
          set -o nounset
          set -o pipefail
          set -o xtrace

          zitiLogin;

          ziti edge delete identity edge-client1
          
          ziti edge delete identity webhook-server1
          
          ziti edge delete service webhook-service1

          ziti edge delete config webhook-intercept-config
          
          ziti edge delete config webhook-host-config
          
          ziti edge delete service-policy webhook-bind-policy

          ziti edge delete service-policy webhook-dial-policy
          
          ziti edge delete edge-router-policy public-routers
          
          ziti edge delete service-edge-router-policy public-routers

          true
    - name: Ensure service1 Create Script Exists in Admin Container
      kubernetes.core.k8s_cp:
        namespace: "{{ controller_namespace }}"
        pod: "{{ controller_pod.metadata.name }}"
        container: ziti-controller-admin
        remote_path: /tmp/service1-create.bash
        state: to_pod
        content: |
          set -o errexit
          set -o nounset
          set -o pipefail
          set -o xtrace

          zitiLogin;

          ziti edge create identity device edge-client1 \
              --role-attributes webhook-clients,k8sapi-clients;

          ziti edge create identity device webhook-server1 \
              --role-attributes webhook-servers;

          ziti edge create config webhook-intercept-config intercept.v1 \
              '{"protocols":["tcp"],"addresses":["webhook.ziti"], "portRanges":[{"low":80, "high":80}]}';

          ziti edge create config webhook-host-config host.v1 \
              '{"protocol":"tcp", "address":"httpbin","port":8080}';

          ziti edge create service webhook-service1 \
            --configs webhook-intercept-config,webhook-host-config;

          ziti edge create service-policy webhook-bind-policy Bind \
              --service-roles '@webhook-service1' --identity-roles '#webhook-servers';

          ziti edge create service-policy webhook-dial-policy Dial \
              --service-roles '@webhook-service1' --identity-roles '#webhook-clients';

          ziti edge create edge-router-policy public-routers \
              --edge-router-roles '#public-routers' --identity-roles '#all';

          ziti edge create service-edge-router-policy public-routers \
              --edge-router-roles '#public-routers' --service-roles '#all';
    - name: Create service1, etc. if New
      when: service1_matches | length < 1
      block:
        - name: Run Ziti CLI Delete Commands
          kubernetes.core.k8s_exec:
            namespace: "{{ controller_namespace }}"
            pod: "{{ controller_pod.metadata.name }}"
            container: ziti-controller-admin
            command: bash /tmp/service1-delete.bash
          ignore_errors: true
        - name: Run Ziti CLI Create Commands
          kubernetes.core.k8s_exec:
            namespace: "{{ controller_namespace }}"
            pod: "{{ controller_pod.metadata.name }}"
            container: ziti-controller-admin
            command: bash /tmp/service1-create.bash
        - name: Find Identities
          kubernetes.core.k8s_exec:
            namespace: "{{ controller_namespace }}"
            pod: "{{ controller_pod.metadata.name }}"
            container: ziti-controller-admin
            command: |
              bash -c 'zitiLogin &>/dev/null; ziti edge list identities --output-json'
          register: identities
        - name: Get edge-client1 JWT
          ansible.builtin.set_fact:
            edge_client1_jwt: "{{ identities.stdout | from_json | json_query('data[?name==`edge-client1`].enrollment.ott.jwt') | first }}"
        - name: Save client JWT
          ansible.builtin.copy:
            content: "{{ edge_client1_jwt }}"
            dest: /tmp/edge-client1.jwt
            mode: "0600"
        - name: Get webhook-server1 JWT
          ansible.builtin.set_fact:
            webhook_server1_jwt: "{{ identities.stdout | from_json | json_query('data[?name==`webhook-server1`].enrollment.ott.jwt') | first }}"
        - name: Save server JWT
          ansible.builtin.copy:
            content: "{{ webhook_server1_jwt }}"
            dest: /tmp/webhook-server1.jwt
            mode: "0600"
        - name: Ensure Enrolled Identity Files with the Same Name Don't Exist
          ansible.builtin.file:
            state: absent
            path: /tmp/webhook-server1.json
        - name: Enroll the server1 Identity
          ansible.builtin.command:
            cmd: ziti edge enroll /tmp/webhook-server1.jwt
    - name: Install Webhook Server Chart
      kubernetes.core.helm:
        create_namespace: true
        release_namespace: "{{ service1_namespace }}"
        release_name: "{{ service1_release }}"
        chart_repo_url: https://openziti.github.io/helm-charts
        chart_ref: httpbin
        chart_version: "<0.2"
        values:
          zitiServiceName: "webhook-service1"
          zitiIdentity: "{{ lookup('ansible.builtin.template', '/tmp/webhook-server1.json', convert_data=False) }}"
