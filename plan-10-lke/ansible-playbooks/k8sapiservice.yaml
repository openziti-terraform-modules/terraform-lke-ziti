- name: Ensure k8sapiservice exists in Ziti
  hosts: localhost
  connection: local
  tasks:
    - name: Find Controller Pods By Namespace and Label
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - app.kubernetes.io/component=ziti-controller
        namespace: "{{ controller_namespace }}"
      register: controller_pods
    - name: Fail Unless One Controller Pod
      when: controller_pods.resources | length != 1
      ansible.builtin.fail:
        msg: "ERROR: expected exactly one controller pod"
    - name: Get Controller Pod
      ansible.builtin.set_fact:
        controller_pod: "{{ controller_pods.resources | first }}"
    - name: Debug Get Pod
      ansible.builtin.debug:
        var: controller_pod.metadata.name
    - name: Find Services
      kubernetes.core.k8s_exec:
        namespace: "{{ controller_namespace }}"
        pod: "{{ controller_pod.metadata.name }}"
        container: ziti-controller-admin
        command: |
          bash -c 'zitiLogin &>/dev/null; ziti edge list services --output-json'
      register: services
    - name: Get k8sapiservice Matches
      ansible.builtin.set_fact:
        k8sapiservice_matches: "{{ services.stdout | from_json | json_query('data[?name==`k8sapiservice`]') }}"
    - name: Debug Service Matches
      ansible.builtin.debug:
        var: k8sapiservice_matches
    - name: Ensure k8sapiservice Script Exists in Admin Container
      kubernetes.core.k8s_cp:
        namespace: "{{ controller_namespace }}"
        pod: "{{ controller_pod.metadata.name }}"
        container: ziti-controller-admin
        remote_path: /tmp/k8sapiservice.bash
        state: to_pod
        content: |
          set -o errexit
          set -o nounset
          set -o pipefail
          set -o xtrace

          zitiLogin;

          ziti edge create config k8sapi-intercept-config intercept.v1 \
              '{"protocols":["tcp"],"addresses":["kubernetes.default.svc"], "portRanges":[{"low":443, "high":443}]}';

          ziti edge create config k8sapi-host-config host.v1 \
              '{"protocol":"tcp", "address":"kubernetes.default.svc","port":443}';

          ziti edge create service k8sapiservice \
            --configs k8sapi-intercept-config,k8sapi-host-config;

          ziti edge create service-policy k8sapi-bind-policy Bind \
              --service-roles '@k8sapiservice' --identity-roles '#k8sapi-servers';

          ziti edge create service-policy k8sapi-dial-policy Dial \
              --service-roles '@k8sapiservice' --identity-roles '#k8sapi-clients';

          ziti edge update identity router1 --role-attributes k8sapi-servers
    - name: Create k8sapiservice Unless Exists
      when: k8sapiservice_matches | length < 1
      kubernetes.core.k8s_exec:
        namespace: "{{ controller_namespace }}"
        pod: "{{ controller_pod.metadata.name }}"
        container: ziti-controller-admin
        command: bash /tmp/k8sapiservice.bash
